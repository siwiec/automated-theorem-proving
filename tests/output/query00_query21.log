Setting columns: tab1 ['col11', 'col12', 'col13', 'col14', 'col15']
Setting columns: tab2 ['col21', 'col22', 'col23', 'col24', 'col25']
Setting columns: tab ['fst', 'snd', 'trd']
{'tab1': ['COL11', 'COL12', 'COL13', 'COL14', 'COL15'], 'tab2': ['COL21', 'COL22', 'COL23', 'COL24', 'COL25'], 'tab': ['FST', 'SND', 'TRD']}
{}
select tab1.col11
from tab1

select alias.col11
from 
    (select col11, col12 from tab1 where col11 = col12) as alias
Translating query00.sql...
subquery tab1
table name tab1 table_columns ['COL11', 'COL12', 'COL13', 'COL14', 'COL15']
all new variables ['COL11', 'TAB1_COL12', 'TAB1_COL13', 'TAB1_COL14', 'TAB1_COL15']
Setting columns: from_2 ['COL11', 'TAB1_COL12', 'TAB1_COL13', 'TAB1_COL14', 'TAB1_COL15']
Setting external: from_2 []
fof(from_2, definition, ( ! [COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15) <=> ( ( tab1 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) )))).
Setting columns: select_1 ['COL11']
Setting external: select_1 []
fof(select_1, definition, ( ! [COL11] : (select_1 ( COL11) <=> ( ? [TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] :  ( from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15 )  & $true )  )  ) )).
Setting columns: main_query_1 ['COL11']
Setting external: main_query_1 []
fof(main_query_1, definition, ( ! [COL11] : (main_query_1 ( COL11) <=> (select_1 ( COL11))))).
Translating query21.sql...
subquery {'value': {'select': [{'value': 'col11'}, {'value': 'col12'}], 'from': 'tab1', 'where': {'eq': ['col11', 'col12']}}, 'name': 'alias'}
subquery tab1
table name tab1 table_columns ['COL11', 'COL12', 'COL13', 'COL14', 'COL15']
all new variables ['TAB1_COL11', 'TAB1_COL12', 'TAB1_COL13', 'TAB1_COL14', 'TAB1_COL15']
Setting columns: from_7 ['TAB1_COL11', 'TAB1_COL12', 'TAB1_COL13', 'TAB1_COL14', 'TAB1_COL15']
Setting external: from_7 []
fof(from_7, definition, ( ! [TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15) <=> ( ( tab1 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) )))).
Setting external: where_8 ['COL11']
Setting external: where_8 ['COL11', 'COL12']
fof(where_8, definition, ( ! [COL11, COL12] : (where_8 ( COL11, COL12) <=> (eq ( COL11, COL12 ) )))).
Setting columns: select_6 ['COL11', 'COL12']
Setting external: select_6 []
fof(select_6, definition, ( ! [COL11, COL12] : (select_6 ( COL11, COL12) <=> ( ? [TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] :  ( from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15 )  & where_8 ( COL11, COL12 )  )  )  ) )).
Setting columns: subquery_from_5 ['COL11', 'COL12']
Setting external: subquery_from_5 []
fof(subquery_from_5, definition, ( ! [COL11, COL12] : (subquery_from_5 ( COL11, COL12) <=> (select_6 ( COL11, COL12))))).
all new variables ['COL11', 'ALIAS_COL12']
Setting columns: from_4 ['COL11', 'ALIAS_COL12']
Setting external: from_4 []
fof(from_4, definition, ( ! [COL11, ALIAS_COL12] : (from_4 ( COL11, ALIAS_COL12) <=> ( ( subquery_from_5 ( COL11, ALIAS_COL12)) )))).
Setting columns: select_3 ['COL11']
Setting external: select_3 []
fof(select_3, definition, ( ! [COL11] : (select_3 ( COL11) <=> ( ? [ALIAS_COL12] :  ( from_4 ( COL11, ALIAS_COL12 )  & $true )  )  ) )).
Setting columns: main_query_2 ['COL11']
Setting external: main_query_2 []
fof(main_query_2, definition, ( ! [COL11] : (main_query_2 ( COL11) <=> (select_3 ( COL11))))).

fof(reflexivity_of_equality, axiom, ( ! [X] : eq(X, X) )).
fof(symmetry_of_equality, axiom, ( ! [X,Y] : ( eq(X, Y) => eq (Y, X) ) )).
fof(transitivity_of_equality, axiom, ( ! [X,Y,Z] : ( ( eq(X, Y) & eq(Y, Z) ) => eq(X, Z) ) )).
fof(reflexivity_of_less_than_or_equal, axiom, ( ! [X] : lte(X,X) )).
fof(antisymmetry_of_less_than_or_equal, axiom, ( ! [X,Y] : ( ( lte(X,Y) & lte(Y,X) ) <=> eq(X, Y) ) )).
fof(transitivity_of_less_than_or_equal, axiom, ( ! [X,Y,Z] : ( ( lte(X,Y) & lte(Y,Z) ) => lte(X,Z) ) )).
fof(less_than_definition, definition, ( ! [X,Y] : ( ( lt(X,Y) ) <=> ( lte(X,Y) & (~ eq(X,Y))) ) )).
fof(greater_than_definition, definition, ( ! [X,Y] : ( ( gt(X,Y) ) <=>  ( lt(Y,X)) ) )).
fof(not_equal_definition, definition, ( ! [X,Y] : ( ( neq(X,Y) ) <=> (~ eq(X,Y)) ) )).
fof(greater_than_or_equal_definition, definition, ( ! [X,Y] : ( ( gte(X,Y) ) <=> (lte(Y,X))) )).
fof(substitution_from_2_COL11, axiom, ( ! [X, COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( COL11 = X & from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2 ( X, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL12, axiom, ( ! [X, COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL12 = X & from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2 ( COL11, X, TAB1_COL13, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL13, axiom, ( ! [X, COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL13 = X & from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2 ( COL11, TAB1_COL12, X, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL14, axiom, ( ! [X, COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL14 = X & from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2 ( COL11, TAB1_COL12, TAB1_COL13, X, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL15, axiom, ( ! [X, COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL15 = X & from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2 ( COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, X)))).
fof(substitution_select_6_COL11, axiom, ( ! [X, COL11, COL12] : (( COL11 = X & select_6 ( COL11, COL12)) => select_6 ( X, COL12)))).
fof(substitution_select_6_COL12, axiom, ( ! [X, COL11, COL12] : (( COL12 = X & select_6 ( COL11, COL12)) => select_6 ( COL11, X)))).
fof(substitution_where_8_COL11, axiom, ( ! [X, COL11, COL12] : (( COL11 = X & where_8 ( COL11, COL12)) => where_8 ( X, COL12)))).
fof(substitution_where_8_COL12, axiom, ( ! [X, COL11, COL12] : (( COL12 = X & where_8 ( COL11, COL12)) => where_8 ( COL11, X)))).
fof(substitution_tab2_COL21, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL21 = X & tab2 ( COL21, COL22, COL23, COL24, COL25)) => tab2 ( X, COL22, COL23, COL24, COL25)))).
fof(substitution_tab2_COL22, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL22 = X & tab2 ( COL21, COL22, COL23, COL24, COL25)) => tab2 ( COL21, X, COL23, COL24, COL25)))).
fof(substitution_tab2_COL23, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL23 = X & tab2 ( COL21, COL22, COL23, COL24, COL25)) => tab2 ( COL21, COL22, X, COL24, COL25)))).
fof(substitution_tab2_COL24, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL24 = X & tab2 ( COL21, COL22, COL23, COL24, COL25)) => tab2 ( COL21, COL22, COL23, X, COL25)))).
fof(substitution_tab2_COL25, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL25 = X & tab2 ( COL21, COL22, COL23, COL24, COL25)) => tab2 ( COL21, COL22, COL23, COL24, X)))).
fof(substitution_subquery_from_5_COL11, axiom, ( ! [X, COL11, COL12] : (( COL11 = X & subquery_from_5 ( COL11, COL12)) => subquery_from_5 ( X, COL12)))).
fof(substitution_subquery_from_5_COL12, axiom, ( ! [X, COL11, COL12] : (( COL12 = X & subquery_from_5 ( COL11, COL12)) => subquery_from_5 ( COL11, X)))).
fof(substitution_from_4_COL11, axiom, ( ! [X, COL11, ALIAS_COL12] : (( COL11 = X & from_4 ( COL11, ALIAS_COL12)) => from_4 ( X, ALIAS_COL12)))).
fof(substitution_from_4_ALIAS_COL12, axiom, ( ! [X, COL11, ALIAS_COL12] : (( ALIAS_COL12 = X & from_4 ( COL11, ALIAS_COL12)) => from_4 ( COL11, X)))).
fof(substitution_tab1_COL11, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL11 = X & tab1 ( COL11, COL12, COL13, COL14, COL15)) => tab1 ( X, COL12, COL13, COL14, COL15)))).
fof(substitution_tab1_COL12, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL12 = X & tab1 ( COL11, COL12, COL13, COL14, COL15)) => tab1 ( COL11, X, COL13, COL14, COL15)))).
fof(substitution_tab1_COL13, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL13 = X & tab1 ( COL11, COL12, COL13, COL14, COL15)) => tab1 ( COL11, COL12, X, COL14, COL15)))).
fof(substitution_tab1_COL14, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL14 = X & tab1 ( COL11, COL12, COL13, COL14, COL15)) => tab1 ( COL11, COL12, COL13, X, COL15)))).
fof(substitution_tab1_COL15, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL15 = X & tab1 ( COL11, COL12, COL13, COL14, COL15)) => tab1 ( COL11, COL12, COL13, COL14, X)))).
fof(substitution_from_7_TAB1_COL11, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL11 = X & from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_7 ( X, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_7_TAB1_COL12, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL12 = X & from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_7 ( TAB1_COL11, X, TAB1_COL13, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_7_TAB1_COL13, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL13 = X & from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_7 ( TAB1_COL11, TAB1_COL12, X, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_7_TAB1_COL14, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL14 = X & from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, X, TAB1_COL15)))).
fof(substitution_from_7_TAB1_COL15, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL15 = X & from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_7 ( TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, X)))).
fof(substitution_tab_FST, axiom, ( ! [X, FST, SND, TRD] : (( FST = X & tab ( FST, SND, TRD)) => tab ( X, SND, TRD)))).
fof(substitution_tab_SND, axiom, ( ! [X, FST, SND, TRD] : (( SND = X & tab ( FST, SND, TRD)) => tab ( FST, X, TRD)))).
fof(substitution_tab_TRD, axiom, ( ! [X, FST, SND, TRD] : (( TRD = X & tab ( FST, SND, TRD)) => tab ( FST, SND, X)))).

fof(equivalence_check, conjecture, ( ! [ COL11 ] : ( main_query_1(COL11) <=> main_query_2(COL11) ) )).













Columns:
{
    "tab1": [
        "COL11",
        "COL12",
        "COL13",
        "COL14",
        "COL15"
    ],
    "tab2": [
        "COL21",
        "COL22",
        "COL23",
        "COL24",
        "COL25"
    ],
    "tab": [
        "FST",
        "SND",
        "TRD"
    ],
    "from_2": [
        "COL11",
        "TAB1_COL12",
        "TAB1_COL13",
        "TAB1_COL14",
        "TAB1_COL15"
    ],
    "select_1": [
        "COL11"
    ],
    "main_query_1": [
        "COL11"
    ],
    "from_7": [
        "TAB1_COL11",
        "TAB1_COL12",
        "TAB1_COL13",
        "TAB1_COL14",
        "TAB1_COL15"
    ],
    "select_6": [
        "COL11",
        "COL12"
    ],
    "subquery_from_5": [
        "COL11",
        "COL12"
    ],
    "from_4": [
        "COL11",
        "ALIAS_COL12"
    ],
    "select_3": [
        "COL11"
    ],
    "main_query_2": [
        "COL11"
    ]
}
External:
{
    "from_2": [],
    "select_1": [],
    "main_query_1": [],
    "from_7": [],
    "where_8": [
        "COL11",
        "COL12"
    ],
    "select_6": [],
    "subquery_from_5": [],
    "from_4": [],
    "select_3": [],
    "main_query_2": []
}
Exiting with code: 0
eprover: CPU time limit exceeded, terminating
