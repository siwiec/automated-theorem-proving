select tab1.col11 as alias11
from tab1

select col11,
col21
from tab1, tab2
where col22 < col12 or col11 = col21


Translating query01.sql...
subquery tab1
fof(from_2, definition, ( ! [TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15) <=> (tab1(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15) )))).
fof(select_1, definition, ( ! [TAB1_COL11] : (select_1(TAB1_COL11) <=> ( ? [TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15) & $true))))).
fof(main_query_1, definition, ( ! [ALIAS11] : (main_query_1(ALIAS11) <=> (select_1(ALIAS11))))).
Translating query16.sql...
subquery tab1
subquery tab2
fof(from_4, definition, ( ! [TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25) <=> (tab1(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15) & tab2(TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25) )))).
WHERE STATEMENT {'or': [{'lt': ['col22', 'col12']}, {'eq': ['col11', 'col21']}]}
fof(where_5, definition, ( ! [COL22, COL21, COL11, COL12] : (where_5(COL22, COL21, COL11, COL12) <=> ((lt(COL22, COL12) | eq(COL11, COL21)))))).
fof(select_3, definition, ( ! [COL11, COL21] : (select_3(COL11, COL21) <=> ( ? [TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25) & where_5(COL22, COL21, COL11, COL12)))))).
fof(main_query_2, definition, ( ! [COL11, COL21] : (main_query_2(COL11, COL21) <=> (select_3(COL11, COL21))))).

fof(reflexivity_of_equality, axiom, ( ! [X] : eq(X, X) )).
fof(symmetry_of_equality, axiom, ( ! [X,Y] : ( eq(X, Y) => eq (Y, X) ) )).
fof(transitivity_of_equality, axiom, ( ! [X,Y,Z] : ( ( eq(X, Y) & eq(Y, Z) ) => eq(X, Z) ) )).
fof(reflexivity_of_less_than_or_equal, axiom, ( ! [X] : lte(X,X) )).
fof(antisymmetry_of_less_than_or_equal, axiom, ( ! [X,Y] : ( ( lte(X,Y) & lte(Y,X) ) <=> eq(X, Y) ) )).
fof(transitivity_of_less_than_or_equal, axiom, ( ! [X,Y,Z] : ( ( lte(X,Y) & lte(Y,Z) ) => lte(X,Z) ) )).
fof(less_than_definition, definition, ( ! [X,Y] : ( ( lt(X,Y) ) <=> ( lte(X,Y) & (~ eq(X,Y))) ) )).
fof(greater_than_definition, definition, ( ! [X,Y] : ( ( gt(X,Y) ) <=>  ( lt(Y,X)) ) )).
fof(not_equal_definition, definition, ( ! [X,Y] : ( ( neq(X,Y) ) <=> (~ eq(X,Y)) ) )).
fof(greater_than_or_equal_definition, definition, ( ! [X,Y] : ( ( gte(X,Y) ) <=> (lte(Y,X))) )).
fof(substitution_tab2_COL21, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL21 = X & tab2(COL21, COL22, COL23, COL24, COL25)) => tab2(X, COL22, COL23, COL24, COL25)))).
fof(substitution_tab2_COL22, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL22 = X & tab2(COL21, COL22, COL23, COL24, COL25)) => tab2(COL21, X, COL23, COL24, COL25)))).
fof(substitution_tab2_COL23, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL23 = X & tab2(COL21, COL22, COL23, COL24, COL25)) => tab2(COL21, COL22, X, COL24, COL25)))).
fof(substitution_tab2_COL24, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL24 = X & tab2(COL21, COL22, COL23, COL24, COL25)) => tab2(COL21, COL22, COL23, X, COL25)))).
fof(substitution_tab2_COL25, axiom, ( ! [X, COL21, COL22, COL23, COL24, COL25] : (( COL25 = X & tab2(COL21, COL22, COL23, COL24, COL25)) => tab2(COL21, COL22, COL23, COL24, X)))).
fof(substitution_from_2_TAB1_COL11, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL11 = X & from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2(X, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL12, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL12 = X & from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2(TAB1_COL11, X, TAB1_COL13, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL13, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL13 = X & from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2(TAB1_COL11, TAB1_COL12, X, TAB1_COL14, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL14, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL14 = X & from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, X, TAB1_COL15)))).
fof(substitution_from_2_TAB1_COL15, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15] : (( TAB1_COL15 = X & from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15)) => from_2(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, X)))).
fof(substitution_main_query_1_ALIAS11, axiom, ( ! [X, ALIAS11] : (( ALIAS11 = X & main_query_1(ALIAS11)) => main_query_1(X)))).
fof(substitution_select_3_COL11, axiom, ( ! [X, COL11, COL21, COL22, COL21, COL11, COL12] : (( COL11 = X & select_3(COL11, COL21, COL22, COL21, COL11, COL12)) => select_3(X, COL21, COL22, COL21, X, COL12)))).
fof(substitution_select_3_COL21, axiom, ( ! [X, COL11, COL21, COL22, COL21, COL11, COL12] : (( COL21 = X & select_3(COL11, COL21, COL22, COL21, COL11, COL12)) => select_3(COL11, X, COL22, X, COL11, COL12)))).
fof(substitution_select_3_COL22, axiom, ( ! [X, COL11, COL21, COL22, COL21, COL11, COL12] : (( COL22 = X & select_3(COL11, COL21, COL22, COL21, COL11, COL12)) => select_3(COL11, COL21, X, COL21, COL11, COL12)))).
fof(substitution_select_3_COL21, axiom, ( ! [X, COL11, COL21, COL22, COL21, COL11, COL12] : (( COL21 = X & select_3(COL11, COL21, COL22, COL21, COL11, COL12)) => select_3(COL11, X, COL22, X, COL11, COL12)))).
fof(substitution_select_3_COL11, axiom, ( ! [X, COL11, COL21, COL22, COL21, COL11, COL12] : (( COL11 = X & select_3(COL11, COL21, COL22, COL21, COL11, COL12)) => select_3(X, COL21, COL22, COL21, X, COL12)))).
fof(substitution_select_3_COL12, axiom, ( ! [X, COL11, COL21, COL22, COL21, COL11, COL12] : (( COL12 = X & select_3(COL11, COL21, COL22, COL21, COL11, COL12)) => select_3(COL11, COL21, COL22, COL21, COL11, X)))).
fof(substitution_where_5_COL22, axiom, ( ! [X, COL22, COL21, COL11, COL12] : (( COL22 = X & where_5(COL22, COL21, COL11, COL12)) => where_5(X, COL21, COL11, COL12)))).
fof(substitution_where_5_COL21, axiom, ( ! [X, COL22, COL21, COL11, COL12] : (( COL21 = X & where_5(COL22, COL21, COL11, COL12)) => where_5(COL22, X, COL11, COL12)))).
fof(substitution_where_5_COL11, axiom, ( ! [X, COL22, COL21, COL11, COL12] : (( COL11 = X & where_5(COL22, COL21, COL11, COL12)) => where_5(COL22, COL21, X, COL12)))).
fof(substitution_where_5_COL12, axiom, ( ! [X, COL22, COL21, COL11, COL12] : (( COL12 = X & where_5(COL22, COL21, COL11, COL12)) => where_5(COL22, COL21, COL11, X)))).
fof(substitution_select_1_ALIAS11, axiom, ( ! [X, ALIAS11] : (( ALIAS11 = X & select_1(ALIAS11)) => select_1(X)))).
fof(substitution_from_4_TAB1_COL11, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB1_COL11 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(X, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB1_COL12, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB1_COL12 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, X, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB1_COL13, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB1_COL13 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, X, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB1_COL14, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB1_COL14 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, X, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB1_COL15, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB1_COL15 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, X, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB2_COL21, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB2_COL21 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, X, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB2_COL22, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB2_COL22 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, X, TAB2_COL23, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB2_COL23, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB2_COL23 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, X, TAB2_COL24, TAB2_COL25)))).
fof(substitution_from_4_TAB2_COL24, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB2_COL24 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, X, TAB2_COL25)))).
fof(substitution_from_4_TAB2_COL25, axiom, ( ! [X, TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25] : (( TAB2_COL25 = X & from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, TAB2_COL25)) => from_4(TAB1_COL11, TAB1_COL12, TAB1_COL13, TAB1_COL14, TAB1_COL15, TAB2_COL21, TAB2_COL22, TAB2_COL23, TAB2_COL24, X)))).
fof(substitution_main_query_2_COL11, axiom, ( ! [X, COL11, COL21] : (( COL11 = X & main_query_2(COL11, COL21)) => main_query_2(X, COL21)))).
fof(substitution_main_query_2_COL21, axiom, ( ! [X, COL11, COL21] : (( COL21 = X & main_query_2(COL11, COL21)) => main_query_2(COL11, X)))).
fof(substitution_tab_FST, axiom, ( ! [X, FST, SND, TRD] : (( FST = X & tab(FST, SND, TRD)) => tab(X, SND, TRD)))).
fof(substitution_tab_SND, axiom, ( ! [X, FST, SND, TRD] : (( SND = X & tab(FST, SND, TRD)) => tab(FST, X, TRD)))).
fof(substitution_tab_TRD, axiom, ( ! [X, FST, SND, TRD] : (( TRD = X & tab(FST, SND, TRD)) => tab(FST, SND, X)))).
fof(substitution_tab1_COL11, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL11 = X & tab1(COL11, COL12, COL13, COL14, COL15)) => tab1(X, COL12, COL13, COL14, COL15)))).
fof(substitution_tab1_COL12, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL12 = X & tab1(COL11, COL12, COL13, COL14, COL15)) => tab1(COL11, X, COL13, COL14, COL15)))).
fof(substitution_tab1_COL13, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL13 = X & tab1(COL11, COL12, COL13, COL14, COL15)) => tab1(COL11, COL12, X, COL14, COL15)))).
fof(substitution_tab1_COL14, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL14 = X & tab1(COL11, COL12, COL13, COL14, COL15)) => tab1(COL11, COL12, COL13, X, COL15)))).
fof(substitution_tab1_COL15, axiom, ( ! [X, COL11, COL12, COL13, COL14, COL15] : (( COL15 = X & tab1(COL11, COL12, COL13, COL14, COL15)) => tab1(COL11, COL12, COL13, COL14, X)))).

fof(equivalence_check, conjecture, ( ! [ ALIAS11 ] : ( main_query_1(ALIAS11) <=> main_query_2(ALIAS11) ) )).










Columns:
{
    "tab1": [
        "COL11",
        "COL12",
        "COL13",
        "COL14",
        "COL15"
    ],
    "tab2": [
        "COL21",
        "COL22",
        "COL23",
        "COL24",
        "COL25"
    ],
    "tab": [
        "FST",
        "SND",
        "TRD"
    ],
    "from_2": [
        "TAB1_COL11",
        "TAB1_COL12",
        "TAB1_COL13",
        "TAB1_COL14",
        "TAB1_COL15"
    ],
    "select_1": [
        "ALIAS11"
    ],
    "main_query_1": [
        "ALIAS11"
    ],
    "from_4": [
        "TAB1_COL11",
        "TAB1_COL12",
        "TAB1_COL13",
        "TAB1_COL14",
        "TAB1_COL15",
        "TAB2_COL21",
        "TAB2_COL22",
        "TAB2_COL23",
        "TAB2_COL24",
        "TAB2_COL25"
    ],
    "where_5": [
        "COL22",
        "COL21",
        "COL11",
        "COL12"
    ],
    "select_3": [
        "COL11",
        "COL21"
    ],
    "main_query_2": [
        "COL11",
        "COL21"
    ]
}
External:
{
    "select_1": [],
    "select_3": [
        "COL22",
        "COL21",
        "COL11",
        "COL12"
    ]
}
