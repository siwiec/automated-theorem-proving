% Refutation found. Thanks to Tanya!
% SZS status Theorem for test1_equal
% SZS output start Proof for test1_equal
1. ! [X0,X1] : (main_query_0(X0,X1) <=> ? [X2,X3,X4,X5] : (b_fst = a_snd & a_fst = b_snd & $true & tab(X1,X4,X5) & tab(X0,X2,X3))) [input]
2. ! [X0,X1] : (main_query_1(X0,X1) <=> ? [X2,X3,X4,X5,X6,X7,X8] : (c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & $true & tab(X6,X7,X8) & tab(X1,X4,X5) & tab(X0,X2,X3))) [input]
3. ! [X0,X1] : (main_query_0(X0,X1) <=> main_query_1(X0,X1)) [input]
4. ~! [X0,X1] : (main_query_0(X0,X1) <=> main_query_1(X0,X1)) [negated conjecture 3]
15. ! [X13,X14,X15] : ((X13 = X14 & X13 = X14) => X13 = X15) [input]
16. ! [X0,X1] : (main_query_0(X0,X1) <=> ? [X2,X3,X4,X5] : (b_fst = a_snd & a_fst = b_snd & tab(X1,X4,X5) & tab(X0,X2,X3))) [true and false elimination 1]
17. ! [X0,X1] : (main_query_1(X0,X1) <=> ? [X2,X3,X4,X5,X6,X7,X8] : (c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & tab(X6,X7,X8) & tab(X1,X4,X5) & tab(X0,X2,X3))) [true and false elimination 2]
28. ! [X0,X1,X2] : ((X0 = X1 & X0 = X1) => X0 = X2) [rectify 15]
29. ? [X0,X1] : (main_query_0(X0,X1) <~> main_query_1(X0,X1)) [ennf transformation 4]
47. ! [X0,X1,X2] : (X0 = X2 | (X0 != X1 | X0 != X1)) [ennf transformation 28]
48. ! [X0,X1,X2] : (X0 = X2 | X0 != X1 | X0 != X1) [flattening 47]
49. ! [X0,X1] : ((main_query_0(X0,X1) | ! [X2,X3,X4,X5] : (b_fst != a_snd | a_fst != b_snd | ~tab(X1,X4,X5) | ~tab(X0,X2,X3))) & (? [X2,X3,X4,X5] : (b_fst = a_snd & a_fst = b_snd & tab(X1,X4,X5) & tab(X0,X2,X3)) | ~main_query_0(X0,X1))) [nnf transformation 16]
50. ! [X0,X1] : ((main_query_0(X0,X1) | ! [X2,X3,X4,X5] : (b_fst != a_snd | a_fst != b_snd | ~tab(X1,X4,X5) | ~tab(X0,X2,X3))) & (? [X6,X7,X8,X9] : (b_fst = a_snd & a_fst = b_snd & tab(X1,X8,X9) & tab(X0,X6,X7)) | ~main_query_0(X0,X1))) [rectify 49]
51. ! [X1,X0] : (? [X6,X7,X8,X9] : (b_fst = a_snd & a_fst = b_snd & tab(X1,X8,X9) & tab(X0,X6,X7)) => (b_fst = a_snd & a_fst = b_snd & tab(X1,sK2(X0,X1),sK3(X0,X1)) & tab(X0,sK0(X0,X1),sK1(X0,X1)))) [choice axiom]
52. ! [X0,X1] : ((main_query_0(X0,X1) | ! [X2,X3,X4,X5] : (b_fst != a_snd | a_fst != b_snd | ~tab(X1,X4,X5) | ~tab(X0,X2,X3))) & ((b_fst = a_snd & a_fst = b_snd & tab(X1,sK2(X0,X1),sK3(X0,X1)) & tab(X0,sK0(X0,X1),sK1(X0,X1))) | ~main_query_0(X0,X1))) [skolemisation 50,51]
53. ! [X0,X1] : ((main_query_1(X0,X1) | ! [X2,X3,X4,X5,X6,X7,X8] : (c_fst != c_fst | b_fst != a_snd | a_fst != b_snd | ~tab(X6,X7,X8) | ~tab(X1,X4,X5) | ~tab(X0,X2,X3))) & (? [X2,X3,X4,X5,X6,X7,X8] : (c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & tab(X6,X7,X8) & tab(X1,X4,X5) & tab(X0,X2,X3)) | ~main_query_1(X0,X1))) [nnf transformation 17]
54. ! [X0,X1] : ((main_query_1(X0,X1) | ! [X2,X3,X4,X5,X6,X7,X8] : (c_fst != c_fst | b_fst != a_snd | a_fst != b_snd | ~tab(X6,X7,X8) | ~tab(X1,X4,X5) | ~tab(X0,X2,X3))) & (? [X9,X10,X11,X12,X13,X14,X15] : (c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & tab(X13,X14,X15) & tab(X1,X11,X12) & tab(X0,X9,X10)) | ~main_query_1(X0,X1))) [rectify 53]
55. ! [X1,X0] : (? [X9,X10,X11,X12,X13,X14,X15] : (c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & tab(X13,X14,X15) & tab(X1,X11,X12) & tab(X0,X9,X10)) => (c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & tab(sK8(X0,X1),sK9(X0,X1),sK10(X0,X1)) & tab(X1,sK6(X0,X1),sK7(X0,X1)) & tab(X0,sK4(X0,X1),sK5(X0,X1)))) [choice axiom]
56. ! [X0,X1] : ((main_query_1(X0,X1) | ! [X2,X3,X4,X5,X6,X7,X8] : (c_fst != c_fst | b_fst != a_snd | a_fst != b_snd | ~tab(X6,X7,X8) | ~tab(X1,X4,X5) | ~tab(X0,X2,X3))) & ((c_fst = c_fst & b_fst = a_snd & a_fst = b_snd & tab(sK8(X0,X1),sK9(X0,X1),sK10(X0,X1)) & tab(X1,sK6(X0,X1),sK7(X0,X1)) & tab(X0,sK4(X0,X1),sK5(X0,X1))) | ~main_query_1(X0,X1))) [skolemisation 54,55]
57. ? [X0,X1] : ((~main_query_1(X0,X1) | ~main_query_0(X0,X1)) & (main_query_1(X0,X1) | main_query_0(X0,X1))) [nnf transformation 29]
58. ? [X0,X1] : ((~main_query_1(X0,X1) | ~main_query_0(X0,X1)) & (main_query_1(X0,X1) | main_query_0(X0,X1))) => ((~main_query_1(sK11,sK12) | ~main_query_0(sK11,sK12)) & (main_query_1(sK11,sK12) | main_query_0(sK11,sK12))) [choice axiom]
59. (~main_query_1(sK11,sK12) | ~main_query_0(sK11,sK12)) & (main_query_1(sK11,sK12) | main_query_0(sK11,sK12)) [skolemisation 57,58]
60. tab(X0,sK0(X0,X1),sK1(X0,X1)) | ~main_query_0(X0,X1) [cnf transformation 52]
61. tab(X1,sK2(X0,X1),sK3(X0,X1)) | ~main_query_0(X0,X1) [cnf transformation 52]
64. main_query_0(X0,X1) | b_fst != a_snd | a_fst != b_snd | ~tab(X1,X4,X5) | ~tab(X0,X2,X3) [cnf transformation 52]
65. tab(X0,sK4(X0,X1),sK5(X0,X1)) | ~main_query_1(X0,X1) [cnf transformation 56]
67. tab(sK8(X0,X1),sK9(X0,X1),sK10(X0,X1)) | ~main_query_1(X0,X1) [cnf transformation 56]
71. main_query_1(X0,X1) | c_fst != c_fst | b_fst != a_snd | a_fst != b_snd | ~tab(X6,X7,X8) | ~tab(X1,X4,X5) | ~tab(X0,X2,X3) [cnf transformation 56]
72. main_query_1(sK11,sK12) | main_query_0(sK11,sK12) [cnf transformation 59]
73. ~main_query_1(sK11,sK12) | ~main_query_0(sK11,sK12) [cnf transformation 59]
84. X0 = X2 | X0 != X1 | X0 != X1 [cnf transformation 48]
94. X1 = X2 | X1 != X1 [equality resolution 84]
95. X1 = X2 [trivial inequality removal 94]
96. main_query_1(X0,X1) | b_fst != a_snd | a_fst != b_snd | ~tab(X6,X7,X8) | ~tab(X1,X4,X5) | ~tab(X0,X2,X3) [trivial inequality removal 71]
101. 1 <=> a_fst != b_snd [avatar definition]
102. a_fst != b_snd <- {1} [avatar component clause 101]
107. 3 <=> b_fst != a_snd [avatar definition]
108. b_fst != a_snd <- {3} [avatar component clause 107]
110. 4 <=> ! [X1,X3,X5,X0,X2,X4] : (main_query_0(X0,X1) | ~tab(X0,X2,X3) | ~tab(X1,X4,X5)) [avatar definition]
111. ~tab(X1,X4,X5) | ~tab(X0,X2,X3) | main_query_0(X0,X1) <- {4} [avatar component clause 110]
112. ~1 | ~3 | 4 [avatar split clause 64,110,107,101]
114. 6 <=> ! [X1,X0] : ~main_query_0(X0,X1) [avatar definition]
115. ~main_query_0(X0,X1) <- {6} [avatar component clause 114]
119. 8 <=> ! [X7,X8,X6] : ~tab(X6,X7,X8) [avatar definition]
120. ~tab(X6,X7,X8) <- {8} [avatar component clause 119]
122. 10 <=> ! [X1,X3,X5,X0,X2,X4] : (main_query_1(X0,X1) | ~tab(X0,X2,X3) | ~tab(X1,X4,X5)) [avatar definition]
123. ~tab(X1,X4,X5) | ~tab(X0,X2,X3) | main_query_1(X0,X1) <- {10} [avatar component clause 122]
124. 8 | ~1 | ~3 | 10 [avatar split clause 96,122,107,101,119]
126. 12 <=> ! [X1,X0] : ~main_query_1(X0,X1) [avatar definition]
127. ~main_query_1(X0,X1) <- {12} [avatar component clause 126]
131. 14 <=> main_query_0(sK11,sK12) [avatar definition]
132. main_query_0(sK11,sK12) <- {14} [avatar component clause 131]
134. 15 <=> ~main_query_0(sK11,sK12) [avatar definition]
135. ~main_query_0(sK11,sK12) <- {15} [avatar component clause 134]
137. 16 <=> main_query_1(sK11,sK12) [avatar definition]
138. main_query_1(sK11,sK12) <- {16} [avatar component clause 137]
140. 17 <=> ~main_query_1(sK11,sK12) [avatar definition]
141. ~main_query_1(sK11,sK12) <- {17} [avatar component clause 140]
142. ~15 | ~17 [avatar split clause 73,140,134]
143. 14 | 16 [avatar split clause 72,137,131]
144. $false <- {1} [subsumption resolution 102,95]
145. 1 [avatar contradiction clause 144]
146. $false <- {3} [subsumption resolution 108,95]
147. 3 [avatar contradiction clause 146]
155. main_query_0(sK11,X0) <- {14} [superposition 132,95]
162. $false <- {6, 14} [subsumption resolution 155,115]
163. ~6 | ~14 [avatar contradiction clause 162]
164. $false <- {12, 16} [subsumption resolution 138,127]
165. ~12 | ~16 [avatar contradiction clause 164]
166. main_query_1(X0,sK12) <- {16} [superposition 138,95]
170. main_query_1(X1,X0) <- {16} [superposition 166,95]
172. ~main_query_0(X0,X1) <- {8} [resolution 60,120]
188. tab(X0,sK4(X0,X1),X2) | ~main_query_1(X0,X1) [superposition 65,95]
200. ~main_query_1(X0,X1) <- {8} [subsumption resolution 188,120]
201. $false <- {8, 16} [subsumption resolution 200,170]
202. ~8 | ~16 [avatar contradiction clause 201]
220. 6 | ~8 [avatar split clause 172,119,114]
226. main_query_0(X0,sK12) <- {14} [superposition 132,95]
230. ~main_query_1(X0,sK12) <- {17} [superposition 141,95]
234. main_query_0(X1,X0) <- {14} [superposition 226,95]
247. ~main_query_1(X1,X0) <- {17} [superposition 230,95]
249. 12 | 17 [avatar split clause 247,140,126]
253. ~tab(X5,X6,X7) | main_query_1(X5,X8) | ~main_query_0(X9,X8) <- {10} [resolution 123,61]
259. ~tab(X5,X6,X7) | ~main_query_0(X9,X8) <- {10, 12} [subsumption resolution 253,127]
260. ~tab(X5,X6,X7) <- {10, 12, 14} [subsumption resolution 259,234]
261. 8 | ~10 | ~12 | ~14 [avatar split clause 260,131,126,122,119]
262. ~main_query_0(X0,sK12) <- {15} [superposition 135,95]
271. ~main_query_0(X1,X0) <- {15} [superposition 262,95]
273. 6 | 15 [avatar split clause 271,134,114]
277. ~main_query_1(X5,X6) | ~tab(X7,X8,X9) | main_query_0(X7,sK8(X5,X6)) <- {4} [resolution 67,111]
284. ~main_query_1(X5,X6) | ~tab(X7,X8,X9) <- {4, 6} [subsumption resolution 277,115]
285. 8 | 12 | ~4 | ~6 [avatar split clause 284,114,110,126,119]
286. $false [avatar sat refutation 112,124,142,143,145,147,163,165,202,220,249,261,273,285]
% SZS output end Proof for test1_equal
% ------------------------------
% Version: Vampire 4.2.2 (commit e1949dd on 2017-12-14 18:39:21 +0000)
% Termination reason: Refutation

% Memory used [KB]: 4861
% Time elapsed: 0.150 s
% ------------------------------
% ------------------------------
