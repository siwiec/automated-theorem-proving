% Equivallence check for file tests/sql-tiny/test9.sql...
% CREATE TABLE tab (
%   fst NUMBER(4),
%   snd NUMBER(4),
%   trd NUMBER(4),
%   CONSTRAINT tab_pk PRIMARY KEY (fst, snd)
% );
% 
% 
% SELECT b.fst
% FROM tab AS a,
%      tab AS b
% WHERE
%     b.fst = a.snd
%     AND b.fst=b.snd
%     
% SELECT b.fst
% FROM tab AS b
% WHERE b.fst =b.snd

% Database scheme:
% tab:
%	fst: Number
%	snd: Number
%	trd: Number

% Translating query 0...
% SelectStatement
%   Select
%     { qeSetQuantifier = SQDefault
%     , qeSelectList =
%         [ ( Iden [ Name Nothing "b" , Name Nothing "fst" ] , Nothing ) ]
%     , qeFrom =
%         [ TRAlias
%             (TRSimple [ Name Nothing "tab" ])
%             (Alias (Name Nothing "a") Nothing)
%         , TRAlias
%             (TRSimple [ Name Nothing "tab" ])
%             (Alias (Name Nothing "b") Nothing)
%         ]
%     , qeWhere =
%         Just
%           (BinOp
%              (BinOp
%                 (Iden [ Name Nothing "b" , Name Nothing "fst" ])
%                 [ Name Nothing "=" ]
%                 (Iden [ Name Nothing "a" , Name Nothing "snd" ]))
%              [ Name Nothing "and" ]
%              (BinOp
%                 (Iden [ Name Nothing "b" , Name Nothing "fst" ])
%                 [ Name Nothing "=" ]
%                 (Iden [ Name Nothing "b" , Name Nothing "snd" ])))
%     , qeGroupBy = []
%     , qeHaving = Nothing
%     , qeOrderBy = []
%     , qeOffset = Nothing
%     , qeFetchFirst = Nothing
%     }

fof(main_query_0_definition_0, definition, ( ! [B_FST] : ((( main_query_0(B_FST)) <=> ( ? [A_FST, A_SND, A_TRD, B_SND, B_TRD] : (((( tab(A_FST, A_SND, A_TRD)) & (( tab(B_FST, B_SND, B_TRD)) & $true)) & ((B_FST = A_SND) & (B_FST = B_SND))))))))).

% Translating query 1...
% SelectStatement
%   Select
%     { qeSetQuantifier = SQDefault
%     , qeSelectList =
%         [ ( Iden [ Name Nothing "b" , Name Nothing "fst" ] , Nothing ) ]
%     , qeFrom =
%         [ TRAlias
%             (TRSimple [ Name Nothing "tab" ])
%             (Alias (Name Nothing "b") Nothing)
%         ]
%     , qeWhere =
%         Just
%           (BinOp
%              (Iden [ Name Nothing "b" , Name Nothing "fst" ])
%              [ Name Nothing "=" ]
%              (Iden [ Name Nothing "b" , Name Nothing "snd" ]))
%     , qeGroupBy = []
%     , qeHaving = Nothing
%     , qeOrderBy = []
%     , qeOffset = Nothing
%     , qeFetchFirst = Nothing
%     }

fof(main_query_1_definition_0, definition, ( ! [B_FST] : ((( main_query_1(B_FST)) <=> ( ? [B_SND, B_TRD] : (((( tab(B_FST, B_SND, B_TRD)) & $true) & (B_FST = B_SND)))))))).

fof(equivalence_check_1, conjecture, ( ! [B_FST] : ((( main_query_0(B_FST)) <=> ( main_query_1(B_FST)))))).

fof(tab_substitution_1, axiom, ( ! [X_0, X_1, X_2, X_3] : ((((X_0 = X_1) & ( tab(X_1, X_2, X_3))) => ( tab(X_0, X_2, X_3)))))).

fof(tab_substitution_2, axiom, ( ! [X_0, X_1, X_2, X_3] : ((((X_0 = X_2) & ( tab(X_1, X_2, X_3))) => ( tab(X_1, X_0, X_3)))))).

fof(tab_substitution_3, axiom, ( ! [X_0, X_1, X_2, X_3] : ((((X_0 = X_3) & ( tab(X_1, X_2, X_3))) => ( tab(X_1, X_2, X_0)))))).

fof(lessThanOrEqual_substitution_1, axiom, ( ! [X_0, X_1, X_2] : ((((X_0 = X_1) & ( lessthanorequal(X_1, X_2))) => ( lessthanorequal(X_0, X_2)))))).

fof(lessThanOrEqual_substitution_2, axiom, ( ! [X_0, X_1, X_2] : ((((X_0 = X_2) & ( lessthanorequal(X_1, X_2))) => ( lessthanorequal(X_1, X_0)))))).

fof(reflexivity_of_equality, axiom, ( ! [X] : ((X = X)))).

fof(symmetry_of_equality, axiom, ( ! [X, Y] : (((X = Y) => (Y = X))))).

fof(transitivity_of_equality, axiom, ( ! [X, Y, Z] : ((((X = Y) & (Y = Z)) => (X = Z))))).

fof(reflexivity_of_less_than_or_equal, axiom, ( ! [X] : (( lessthanorequal(X, X))))).

fof(antisymmetry_of_less_than_or_equal, axiom, ( ! [X, Y] : (((( lessthanorequal(X, Y)) & ( lessthanorequal(Y, X))) => (X = Y))))).

fof(transitivity_of_less_than_or_equal, axiom, ( ! [X, Y, Z] : (((( lessthanorequal(X, Y)) & ( lessthanorequal(Y, Z))) => ( lessthanorequal(X, Z)))))).

