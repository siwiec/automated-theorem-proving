% CREATE TABLE tab (
%   fst NUMBER(4),
%   snd NUMBER(4),
%   trd NUMBER(4),
%   CONSTRAINT tab_pk PRIMARY KEY (fst, snd)
% );
% 
% SELECT a.fst
% FROM   tab a
% WHERE  ( a.fst = a.snd );
% 
% 
% SELECT a.fst
% FROM   tab a,
%        tab b
% WHERE (a.fst = a.snd);

% Database scheme:
% tab:
%   fst: Number
%   snd: Number
%   trd: Number

fof(equivalence_check,conjecture,(
    ! [A_FST] :
      ((main_query_0_a_tab & 
      main_query_1_a_tab & 
      main_query_1_b_tab )=> 
      ( main_query_0(A_FST)
    <=> main_query_1(A_FST) ) ))).

fof(aux, axiom, main_query_0_a_tab <=>
(! [A_TAB_FST,A_TAB_SND,A_TAB_TRD] :
              ( a(A_TAB_FST,A_TAB_SND,A_TAB_TRD) <=> tab(A_TAB_FST,A_TAB_SND,A_TAB_TRD) ) 
 )
   ).

fof(main_query_0,definition,(
    ! [A_FST] :
      ( main_query_0(A_FST)
    <=> (main_query_0_a_tab & (main_query_0_a_tab =>
    ( ? [A_SND,A_TRD] :
          ( a(A_FST,A_SND,A_TRD)
          & A_FST = A_SND )) ) )))).

fof(aux, axiom, main_query_1_a_tab <=>
(! [A_TAB_FST,A_TAB_SND,A_TAB_TRD] :
              ( a(A_TAB_FST,A_TAB_SND,A_TAB_TRD) <=> tab(A_TAB_FST,A_TAB_SND,A_TAB_TRD) ) 
 )
   ).

fof(aux, axiom, main_query_1_b_tab <=>
(! [B_TAB_FST,B_TAB_SND,B_TAB_TRD] :
              ( b(B_TAB_FST,B_TAB_SND,B_TAB_TRD) <=> tab(B_TAB_FST,B_TAB_SND,B_TAB_TRD) ) 
 )
   ).


fof(main_query_1,definition,(
    ! [A_FST] :
      ( main_query_1(A_FST)
    <=> (main_query_1_a_tab & main_query_1_b_tab & (main_query_1_a_tab & main_query_1_b_tab ) =>
    (? [A_SND,A_TRD,B_FST,B_SND,B_TRD] :
          ((a(A_FST,A_SND,A_TRD)
           & (  b(B_FST,B_SND,B_TRD) & (A_FST = A_SND )))
          )
        )
      ))
     )
    ).



fof(tab_substitution_1, axiom, ( ! [X_0, X_1, X_2, X_3] : ((((X_0 = X_1) & ( tab(X_1, X_2, X_3))) => ( tab(X_0, X_2, X_3)))))).

fof(tab_substitution_2, axiom, ( ! [X_0, X_1, X_2, X_3] : ((((X_0 = X_2) & ( tab(X_1, X_2, X_3))) => ( tab(X_1, X_0, X_3)))))).

fof(tab_substitution_3, axiom, ( ! [X_0, X_1, X_2, X_3] : ((((X_0 = X_3) & ( tab(X_1, X_2, X_3))) => ( tab(X_1, X_2, X_0)))))).

fof(reflexivity_of_equality, axiom, ( ! [X] : ((X = X)))).

fof(symmetry_of_equality, axiom, ( ! [X, Y] : (((X = Y) => (Y = X))))).

fof(transitivity_of_equality, axiom, ( ! [X, Y, Z] : ((((X = Y) & (Y = Z)) => (X = Z))))).
